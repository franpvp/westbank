/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.pgy.frames;

import com.business.Cliente;
import com.business.Cuenta;
import com.business.Transferencias;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author sebco
 */
public class Transferir extends javax.swing.JFrame {

    public Cliente cliente = new Cliente();
    public Transferencias transferencias = new Transferencias();

    /**
     * Creates new form Inicio
     */
    public Transferir() {
        initComponents();
    }

    public Transferir(Cliente cliente) {
        initComponents();

        this.cliente = cliente;
        mostrarNumCuenta();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblIngrese1 = new javax.swing.JLabel();
        lblNumCuenta = new javax.swing.JLabel();
        lblCuentaDestino = new javax.swing.JLabel();
        txtCuentaDestino = new javax.swing.JTextField();
        txtMontoTransferir = new javax.swing.JTextField();
        btnTranferir = new javax.swing.JButton();
        lblTransfExitosa = new javax.swing.JLabel();
        lblMontoTranferencia = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menInicio = new javax.swing.JMenu();
        menTransferir = new javax.swing.JMenu();
        menHistTransf = new javax.swing.JMenu();
        menSalir = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("West Bank");
        setResizable(false);

        lblIngrese1.setText("Este es tu número de cuenta:");

        lblNumCuenta.setText("111111111");
        lblNumCuenta.setVisible(false);

        lblCuentaDestino.setText("Ingresa el número de la cuenta de destino");

        btnTranferir.setText("Transferir");
        btnTranferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranferirActionPerformed(evt);
            }
        });

        lblTransfExitosa.setForeground(new java.awt.Color(0, 102, 0));
        lblTransfExitosa.setText("La transferencia se ha realizado correctamente");
        lblTransfExitosa.setVisible(false);

        lblMontoTranferencia.setText("Ingresa el monto a transferir");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMontoTranferencia)
                    .addComponent(lblTransfExitosa)
                    .addComponent(txtCuentaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(lblIngrese1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblNumCuenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(lblCuentaDestino))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnTranferir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                        .addComponent(txtMontoTransferir, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIngrese1)
                    .addComponent(lblNumCuenta))
                .addGap(18, 18, 18)
                .addComponent(lblCuentaDestino)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCuentaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMontoTranferencia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMontoTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnTranferir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTransfExitosa)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        menInicio.setText("Inicio");
        menInicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menInicioMouseClicked(evt);
            }
        });
        jMenuBar1.add(menInicio);

        menTransferir.setText("Transferir");
        jMenuBar1.add(menTransferir);

        menHistTransf.setText("Historial de Transferencias");
        menHistTransf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menHistTransfMouseClicked(evt);
            }
        });
        jMenuBar1.add(menHistTransf);

        menSalir.setText("Salir");
        menSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menSalirMouseClicked(evt);
            }
        });
        jMenuBar1.add(menSalir);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTranferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranferirActionPerformed

        int numCuentaOrig = cliente.getCuenta().getNumCuenta();
        //Campo numero cuenta de destino
        String numCuentaDest = txtCuentaDestino.getText();
        //Campo monto de transferencia
        String montoTransf = txtMontoTransferir.getText();
        
        //Validamos con los if el "numCuentaDest" y "montoTransf" mediante métodos
        if (valNroCuentaDest(numCuentaDest) && valCantTransf(montoTransf)) {
            int numCuentaDestInt = Integer.parseInt(numCuentaDest);
            int montoTransfInt = Integer.parseInt(montoTransf);
            Cuenta cuentaOrig = new Cuenta().obtener(numCuentaOrig);
            Cuenta cuentaDest = new Cuenta().obtener(numCuentaDestInt);
            if (numCuentaDest != null) {
                if(descCtaOrig(cuentaOrig, montoTransfInt)){
                    abonoCuentaDestino(cuentaDest, montoTransfInt);
                    lblTransfExitosa.setVisible(true);
                    Transferencias transferencias  = new Transferencias();
                    transferencias.setCuentaOrigen(cuentaOrig.getNumCuenta());
                    transferencias.setMonto(montoTransfInt);
                    transferencias.setCuentaDestino(cuentaDest.getNumCuenta());
                    transferencias.setFechaHora(new Date());
                    new Transferencias().insertar(transferencias);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "No se puede realizar la transferencia");
            }
        }
    }//GEN-LAST:event_btnTranferirActionPerformed

    private void menInicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menInicioMouseClicked
        
        Inicio frmInicio = new Inicio(cliente);
        frmInicio.setTitle("West Bank");
        frmInicio.setLocation(600, 300);
        frmInicio.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frmInicio.setVisible(true);
        frmInicio.onLoad();
        this.setVisible(false);
        
        
    }//GEN-LAST:event_menInicioMouseClicked

    private void menHistTransfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menHistTransfMouseClicked
        
        HistorialTransf frmHistTrandf = new HistorialTransf(transferencias, cliente);
        frmHistTrandf.setTitle("West Bank");
        frmHistTrandf.setLocation(600, 300);
        frmHistTrandf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frmHistTrandf.setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_menHistTransfMouseClicked

    private void menSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menSalirMouseClicked
        
        JOptionPane.showMessageDialog(rootPane, "Ha salido de la aplicación");
        this.setVisible(false);
    }//GEN-LAST:event_menSalirMouseClicked

    public boolean descCtaOrig(Cuenta cuentaOrig, int intCantTransf) {

        boolean descuento = false;

        if (cuentaOrig.getDesc().equals("Cuenta Corriente")) {
            //Obtieniendo saldo de la cuenta origen
            int saldoCtaOrig = cuentaOrig.getSaldo();
            if (intCantTransf > 0 && saldoCtaOrig >= intCantTransf) {
                int saldoActualCtaOrig = saldoCtaOrig - intCantTransf;
                if (new Cuenta().update(cuentaOrig.getNumCuenta(), cuentaOrig.getSaldo())) {
                    cuentaOrig.update(cuentaOrig.getNumCuenta(), saldoActualCtaOrig);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error al actualizar cuenta origen");
                }
                descuento = true;
            } else if (intCantTransf > 0 && saldoCtaOrig < intCantTransf) {
                JOptionPane.showMessageDialog(rootPane, "No tiene suficiente saldo para realizar la operación");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Ingreso inválido, debe ingresar montos positivos");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "El numero de cuenta ingresado no puede realizar transferencias");
        }

        return descuento;
    }

    public void abonoCuentaDestino(Cuenta cuentaDest, int intCantTransf) {

        int saldoCtaDest = cuentaDest.getSaldo();
        int saldoActualCtaDest = saldoCtaDest + intCantTransf;
        if (new Cuenta().update(cuentaDest.getNumCuenta(), cuentaDest.getSaldo())) {
            cuentaDest.update(cuentaDest.getNumCuenta(), saldoActualCtaDest);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Error al actualizar cuenta destino");
        }
    }
    // Metodo que valida la cantidad de digitos ingresados del numero de cuenta
    // de destino
    public boolean valNroCuentaDest(String numCta) {

        boolean valido = false;

        try {
            if (!numCta.equals("")) {
                if (numCta.length() == 9 && isNumeric(numCta)) {
                    valido = true;
                } else {
                    JOptionPane.showMessageDialog(rootPane, "La longitud de la cuenta debe contener 9 dígitos");
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "Campo numero de cuenta destino vacio, ingrese un numero de cuenta");
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(rootPane, "Ingreso invalido");
        }
        return valido;
    }

    public boolean valCantTransf(String cantTransf) {

        boolean valido = false;

        try {
            if (!cantTransf.equals("")) {
                valido = true;
            } else {
                JOptionPane.showMessageDialog(rootPane, "Debe ingresar un monto a transferir");
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(rootPane, "Ingreso invalido");
        }
        return valido;
    }

    public boolean isNumeric(String num) {

        boolean res;
        try {
            Integer.parseInt(num);
            res = true;
        } catch (NumberFormatException ex) {
            res = false;
        }
        return res;
    }
    
    public void mostrarNumCuenta(){
        
        //Numero de cuenta origen como entero, que se obtiene con el objeto
        //public Cliente cliente = new Cliente();
        System.out.println(cliente);
        int numCuentaOrig = cliente.getCuenta().getNumCuenta();
        //Transformamos de int a string
        String numCuentaOrigStr = String.valueOf(numCuentaOrig);
        //Insertamos en el texto del label "lblNumCuenta" lo que se obtenga
        // en numCuentaOrigStr
        lblNumCuenta.setText(numCuentaOrigStr);
        //Lo hacemos visible
        lblNumCuenta.setVisible(true);
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transferir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transferir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transferir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transferir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transferir().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTranferir;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCuentaDestino;
    private javax.swing.JLabel lblIngrese1;
    private javax.swing.JLabel lblMontoTranferencia;
    private javax.swing.JLabel lblNumCuenta;
    private javax.swing.JLabel lblTransfExitosa;
    private javax.swing.JMenu menHistTransf;
    private javax.swing.JMenu menInicio;
    private javax.swing.JMenu menSalir;
    private javax.swing.JMenu menTransferir;
    private javax.swing.JTextField txtCuentaDestino;
    private javax.swing.JTextField txtMontoTransferir;
    // End of variables declaration//GEN-END:variables
}
